package com.backend.service;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class AuthService {
	@Value("${gestionScol.frontendUrl}")
	private String frontendUrl;
	private final AuthenticationManager authenticationManager;

	private final UserRepository userRepository;
	private final UserMapper userMapper;

	private final RoleRepository roleRepository;
	private final UserDetailsServiceImpl userDetailsServiceImpl;
	private final JwtUtils jwtUtils;
	private final PasswordEncoder passwordEncoder;

	@Autowired
	public AuthService(AuthenticationManager authenticationManager, UserRepository userRepository,
			UserMapper userMapper, RoleRepository roleRepository, UserDetailsServiceImpl userDetailsServiceImpl,
			JwtUtils jwtUtils, PasswordEncoder passwordEncoder) {
		super();
		this.authenticationManager = authenticationManager;
		this.userRepository = userRepository;
		this.userMapper = userMapper;
		this.roleRepository = roleRepository;
		this.userDetailsServiceImpl = userDetailsServiceImpl;
		this.jwtUtils = jwtUtils;
		this.passwordEncoder = passwordEncoder;
	}
	public JwtResponse login(LoginRequest loginRequest) {
		Authentication authentication =null;
		try {
			try {
				 authentication = authenticationManager.authenticate(
						new UsernamePasswordAuthenticationToken(loginRequest.getEmail(), loginRequest.getPassword()));
			} catch (BadCredentialsException e) {
				return null;
			}
			SecurityContextHolder.getContext().setAuthentication(authentication);
			UserDetailsImpl userDetails = (UserDetailsImpl) userDetailsServiceImpl
					.loadUserByUsername(loginRequest.getEmail());

			String jwt = jwtUtils.generateJwtToken(userDetails);
			List<String> roles = userDetails.getAuthorities().stream().map(item -> item.getAuthority())
					.collect(Collectors.toList());
			JwtResponse newJwtResponse = new JwtResponse(jwt, userDetails.getId(), userDetails.getUsername(),
					userDetails.getEmail(), roles,userDetails.getLangue());
			log.info("User {} successfuly connected", loginRequest.getEmail());
			return newJwtResponse;
		} catch (Exception e) {
			log.error("User cannot be authenticated", e);
		}
		return null;

	}
}
